#if defined _convarutils_included
#endinput
#endif
#define _convarutils_included

static ArrayList gRegisteredConVars;
static ArrayList gRegisteredConVarsDescriptions;

stock ConVar CreateConVarCustom(const char[] name, const char[] defaultValue, const char[] description="", int flags=0, bool hasMin=false, float min=0.0, bool hasMax=false, float max=0.0)
{
	if(!gRegisteredConVars)
		gRegisteredConVars = new ArrayList();
	
	if(!gRegisteredConVarsDescriptions)
		gRegisteredConVarsDescriptions = new ArrayList(ByteCountToCells(1024));
	
	ConVar cv = CreateConVar(name, defaultValue, description, flags, hasMin, min, hasMax, max);
	
	gRegisteredConVars.Push(cv);
	gRegisteredConVarsDescriptions.PushString(description);
	
	return cv;
}

stock void AutoExecConfigCustom(bool autoCreate=true, const char[] name="", const char[] folder="sourcemod")
{
	if(gRegisteredConVars.Length == 0)
		return;
	
	if(autoCreate)
	{
		char path[PLATFORM_MAX_PATH], plname[PLATFORM_MAX_PATH];
		
		Format(path, sizeof(path), "cfg/%s", folder);
		if(!DirExists(path) && !CreateDirectory(path, 0o755))
			ThrowError("Failed to create directory \"%s\"!", path);
		
		GetPluginFilename(INVALID_HANDLE, plname, sizeof(plname));
		plname[FindCharInString(plname, '.', true)] = '\0';
		
		if(name[0] != '\0')
			Format(path, sizeof(path), "cfg/%s/%s.cfg", folder, name);
		else
			Format(path, sizeof(path), "cfg/%s/plugin.%s.cfg", folder, plname[FindCharInString(plname, '/', true) + 1]);
		
		ParseConVarFile(path);
		FillConVarFile(path, plname);
	}
	
	AutoExecConfig(false, name, folder);
	
	delete gRegisteredConVars;
	delete gRegisteredConVarsDescriptions;
}

static stock void FillConVarFile(const char path[PLATFORM_MAX_PATH], const char plname[PLATFORM_MAX_PATH])
{
	File file = OpenFile(path, "w");
	
	if(!file)
		ThrowError("Failed to auto generate config \"%s\", make sure the directory has write permission", path);
	
	file.WriteLine("// This file was auto-generated by glib/convarutils.inc");
	file.WriteLine("// ConVars for plugin \"%s.smx\"\n\n", plname);
	
	ConVar cv;
	char buff[1024], buff2[1024];
	float bound;
	for(int i = 0; i < gRegisteredConVars.Length; i++)
	{
		cv = gRegisteredConVars.Get(i);
		
		if(cv.Flags & FCVAR_DONTRECORD)
			continue;
		
		gRegisteredConVarsDescriptions.GetString(i, buff, sizeof(buff));
		
		ReplaceString(buff, sizeof(buff), "\n", "\n// ");
		Format(buff, sizeof(buff), "// %s", buff);
		
		file.WriteLine(buff);
		file.WriteLine("// -");
		
		cv.GetDefault(buff, sizeof(buff));
		Format(buff, sizeof(buff), "// Default: \"%s\"", buff);
		file.WriteLine(buff);
		
		if(cv.GetBounds(ConVarBound_Lower, bound))
		{
			Format(buff, sizeof(buff), "// Minimum: \"%f\"", bound);
			file.WriteLine(buff);
		}
		
		if(cv.GetBounds(ConVarBound_Upper, bound))
		{
			Format(buff, sizeof(buff), "// Maximum: \"%f\"", bound);
			file.WriteLine(buff);
		}
		
		cv.GetName(buff, sizeof(buff));
		cv.GetString(buff2, sizeof(buff2));
		Format(buff, sizeof(buff), "%s \"%s\"\n", buff, buff2);
		file.WriteLine(buff);
	}
	
	delete file;
}

static stock void ParseConVarFile(const char path[PLATFORM_MAX_PATH])
{
	File file = OpenFile(path, "r", true);
	
	if(!FileExists(path))
		return;
	
	ConVar cv;
	int buff_pos;
	bool name_parsed;
	char line[4096], cvar_name[512], cvar_val[512], buff2[512];
	while(file.ReadLine(line, sizeof(line)))
	{
		name_parsed = false;
		cvar_name[0] = '\0';
		cvar_val[0] = '\0';
		
		for(int i = 0; line[i] != '\0' && line[i] != '\n'; i++)
		{
			if(line[i] == '/' && line[i + 1] == '/')
				break;
			
			if(line[i] <= ' ')
				continue;
			
			buff_pos = 0;
			
			if(!name_parsed)
			{
				if(line[i] == '"')
				{
					i++;
					while(line[i] != '"' && line[i] != '\0' && line[i] != '\n')
						cvar_name[buff_pos++] = line[i++];
				}
				else
				{
					while(line[i] > ' ' && line[i] != '"')
						cvar_name[buff_pos++] = line[i++];
					
					if(line[i] == '"')
						i--;
				}
				
				cvar_name[buff_pos] = '\0';
				name_parsed = true;
			}
			else
			{
				//need empty buffer each time, can't actualy fake it
				char buff[sizeof(cvar_val)];
				
				if(line[i] == '"')
				{
					i++;
					while(line[i] != '\0' && line[i] != '\n')
						buff[buff_pos++] = line[i++];
					
					
					while(buff_pos >= 0 && buff[buff_pos] <= ' ')
						buff_pos--;
					
					if(buff[buff_pos] == '"')
						buff_pos--;
				}
				else
				{
					while(line[i] != '\0' && line[i] != '\n')
						buff[buff_pos++] = line[i++];
					
					while(buff_pos >= 0 && buff[buff_pos] <= ' ')
						buff_pos--;
				}
				
				buff[++buff_pos] = '\0';
				strcopy(cvar_val, sizeof(cvar_val), buff);
				break;
			}
		}
		
		for(int i = 0; i < gRegisteredConVars.Length; i++)
		{
			cv = gRegisteredConVars.Get(i);
			cv.GetName(buff2, sizeof(buff2));
			
			if(StrEqual(buff2, cvar_name, false))
				cv.SetString(cvar_val);
		}
	}
	
	delete file;
}

#if defined OVERRIDE_DEFAULT
#define CreateConVar CreateConVarCustom
#define AutoExecConfig AutoExecConfigCustom
#endif